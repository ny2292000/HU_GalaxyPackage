cmake_minimum_required(VERSION 3.20)
project(mainProg LANGUAGES CUDA CXX)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
message(${CMAKE_BINARY_DIR})
set(PYTHON_EXECUTABLE "/home/mp74207/anaconda3/envs/Cosmos/bin/python")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
set(Boost_INCLUDE_DIR /usr/include/)
set(BOOST_LIBRARY_DIR /usr/lib/x86_64-linux-gnu/)
set(Boost_PYTHON_LIBRARY /usr/lib/x86_64-linux-gnu/libboost_python310.so)

# Set the path to the directory containing FindNumPy.cmake
find_package(Python REQUIRED COMPONENTS Interpreter Development NumPy)
find_package(Boost REQUIRED COMPONENTS Python)

# Disable compiler tests
set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY")

# Rest of your CMake code goes here

# Set minimum compute capability
set(CMAKE_CUDA_ARCHITECTURES "50")
# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CXX_COMPILER_WORKS TRUE)
set(CMAKE_CUDA_COMPILER_WORKS TRUE)

if(CMAKE_CUDA_COMPILER_ID MATCHES "NVIDIA")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -arch=sm_50")
endif()

# Set include directories
include_directories(
        /usr/include/
        /home/mp74207/anaconda3/envs/Cosmos/include/python3.9/
        /home/mp74207/anaconda3/lib/python3.9/site-packages/numpy/core/include
        ${CMAKE_SOURCE_DIR}/include
)

set(SOURCE_FILES
        src/main.cu
        include/GalaxyFormationCUDA.h
        )

add_executable(mainProg src/main.cu
        ${CMAKE_SOURCE_DIR}/include/GalaxyFormationCUDA.h
        /home/mp74207/anaconda3/lib/python3.9/site-packages/numpy/core/include//numpy/arrayobject.h
        /home/mp74207/anaconda3/envs/Cosmos/include/python3.9/Python.h
        /usr/include
        )
#set_target_properties(GalaxyFormationGCC_Use PROPERTIES LINKER_LANGUAGE CUDA)
target_link_libraries(mainProg
        ${Python_LIBRARIES}
        boost_python310
        cudart
        stdc++fs
        m
        ${CMAKE_SOURCE_DIR}/lib/libGalaxyFormationCUDA_static.a
        )