#include <cmath>
#include <vector>
#include <future>
#include <iostream>
#include <cuda_runtime.h>

// # Utility functions

// Returns a vector of zeros with the given size
std::vector<double> zeros(int size) {
    return std::vector<double>(size, 0.0);
}

// # CPU functions

double
get_g_cpu(double r_sampling_ii, double z_sampling_jj, double G, const std::vector<double> &dv0, const std::vector<double> &r,
          const std::vector<double> &z,
          const std::vector<double> &costheta, const std::vector<double> &sintheta, const std::vector<double> &rho) {
    unsigned int nr = r.size();
    unsigned int nz = z.size();
    unsigned int ntheta = costheta.size();
    double res = 0.0;
    for (unsigned int i = 0; i < nr; i++) {
        for (unsigned int j = 0; j < nz; j++) {
            for (unsigned int k = 0; k < ntheta; k++) {
                double d = pow(z[j] - z_sampling_jj, 2.0) + pow(r_sampling_ii - r[i] * sintheta[k], 2.0) +
                           r[i] * r[i] * costheta[k] * costheta[k];
                res += G * rho[i] * r[i] * dv0[i] * (z[j] - z_sampling_jj) / pow(d, 1.5);
            }
        }
    }
    return res;
}

std::vector<double>
get_all_g_impl_cpu(double G, const std::vector<double> &dv0, const std::vector<double> &r_sampling,
                   const std::vector<double> &z_sampling,
                   const std::vector<double> &r, const std::vector<double> &z, const std::vector<double> &costheta,
                   const std::vector<double> &sintheta, const std::vector<double> &rho, bool radial = true) {
    std::vector<std::future<double>> futures;
    int nr = r_sampling.size();
    int nz = z_sampling.size();
    futures.reserve(nr * nz);
    // Spawn threads
    std::vector<double> f_z = zeros(nr * nz);
    for (unsigned int i = 0; i < nr; i++) {
        for (unsigned int j = 0; j < nz; j++) {
            futures.emplace_back(std::async(get_g_cpu, r_sampling[i], z_sampling[j], G, dv0, r, z, costheta, sintheta, rho));
        }
    }

// Collect results and populate f_z
    for (unsigned int i = 0; i < nr; i++) {
        for (unsigned int j = 0; j < nz; j++) {
            f_z[i + j * nr] = futures[i * nz + j].get();
        }
    }
    return f_z;
}


// CUDA kernel to compute the gravitational acceleration f_z
// for all points in r and z
__global__ void get_all_g_kernel(int nr, int nz, int nr_sampling, int nz_sampling, double G, double *dv0,
                                 const double *r_sampling, const double *z_sampling,
                                 const double *grid_data, const double *rho,
                                 int costheta_size, bool radial, double *f_z) {

    // Get the indices of the point in r and z for this thread
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    // Use shared memory for caching intermediate results
    extern __shared__ double shared_data[];

    if (i < nr && j < nz) {
        // Initialize the result variable for this thread
        double res = 0.0;
        // Loop over all r and z points in the sampling vectors
        for (int ir = 0; ir < nr_sampling; ir++) {
            for (int iz = 0; iz < nz_sampling; iz++) {
                // Loop over all theta angles in the costheta vector
                for (int k = 0; k < costheta_size; k++) {
                    // Compute the distance between the sampling point and the point in r and z for this thread
                    double d = pow(z_sampling[iz] - grid_data[nz + j], 2.0) +
                               pow(r_sampling[ir] - grid_data[i] * grid_data[2 * nz + k], 2.0)
                               + grid_data[i] * grid_data[i] * grid_data[3 * nz + k] * grid_data[3 * nz + k];
                    // Compute the contribution to the result variable for this thread from this sampling point
                    if (radial) {
                        res += G * rho[ir * nz + iz] * grid_data[i] * dv0[i * nz + j] *
                               (r_sampling[ir] - grid_data[i] * grid_data[2 * nz + k]) / pow(d, 1.5);
                    } else {
                        res += G * rho[ir * nz + iz] * grid_data[i] * dv0[i * nz + j] *
                               (z_sampling[iz] - grid_data[nz + j]) / pow(d, 1.5);
                    }
                }
            }
        }
        // Store the result variable for this thread in the output array
        f_z[i + j * nr] = res;
    }
}


std::vector<double>
get_all_g_impl_cuda(double G, std::vector<double> &dv0, const std::vector<double> &r_sampling,
                    const std::vector<double> &z_sampling,
                    const std::vector<double> &r, const std::vector<double> &z, const std::vector<double> &costheta,
                    const std::vector<double> &sintheta, const std::vector<double> &rho, bool radial = true) {
//    This function computes the gravitational force at all points in a 2D grid using CUDA. The function takes
//    in several input parameters:
//
//            G: the gravitational constant.
//            dv0: the volume element.
//            r_sampling and z_sampling: the radial and vertical sampling vectors, respectively.
//            r, z, and costheta, sintheta, rho: the integration variables used to add up the contribution
//            from elements of volume dv0.
//            redshift: the epoch value.
//            radial: a boolean indicating whether to compute the gravitational force radially or spherically.
//
//            The function first allocates and copies device memory using RAII and smart pointers. It then
//            launches a kernel to compute the gravitational force at all points in the grid. The kernel uses
//            the integration variables to add up the contribution from elements of volume dv0 and the sampling
//            vectors to calculate the distance between points. The kernel corrects G for epoch and computes the
//            gravitational force at all points in the grid. Finally, the function copies the results back to the
//            host and returns them as a vector of doubles.
    int nr_sampling = r_sampling.size();
    int nz_sampling = z_sampling.size();
    int nr = r.size();
    int nz = z.size();

    // Combine r, z, costheta, and sintheta into a single vector (grid_data) for cudaMemcpy
    std::vector<double> grid_data(r);
    grid_data.insert(grid_data.end(), z.begin(), z.end());
    grid_data.insert(grid_data.end(), costheta.begin(), costheta.end());
    grid_data.insert(grid_data.end(), sintheta.begin(), sintheta.end());

    // Allocate and copy device memory using thrust::device_vector
    thrust::device_vector<double> dev_r_sampling(r_sampling.begin(), r_sampling.end());
    thrust::device_vector<double> dev_z_sampling(z_sampling.begin(), z_sampling.end());
    thrust::device_vector<double> dev_grid_data(grid_data.begin(), grid_data.end());
    thrust::device_vector<double> dev_rho(rho.begin(), rho.end());
    thrust::device_vector<double> dev_dv0(dv0.begin(), dv0.end());
    thrust::device_vector<double> dev_f_z(r.size() * z.size());

    // Launch kernel
    int costheta_size = costheta.size();
    dim3 block_size(32, 32);
    dim3 num_blocks((r.size() + block_size.x - 1) / block_size.x, (z.size() + block_size.y - 1) / block_size.y);

    // G already corrected for epoch
    get_all_g_kernel<<<num_blocks, block_size>>>(r.size(), z.size(), r_sampling.size(), z_sampling.size(), G,
            thrust::raw_pointer_cast(dev_dv0.data()),
            thrust::raw_pointer_cast(dev_r_sampling.data()),
            thrust::raw_pointer_cast(dev_z_sampling.data()),
            thrust::raw_pointer_cast(dev_grid_data.data()),
            thrust::raw_pointer_cast(dev_rho.data()), costheta_size,
            radial, thrust::raw_pointer_cast(dev_f_z.data()));

    // Copy results back to host using thrust::copy
    std::vector<double> f_z(dev_f_z.size());
    thrust::copy(dev_f_z.begin(), dev_f_z.end(), f_z.begin());

    // Return result
    return f_z;
}


