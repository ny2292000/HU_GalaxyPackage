cmake_minimum_required(VERSION 3.20)
project(GalaxyFormationCUDALib LANGUAGES CUDA CXX)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${CMAKE_SOURCE_DIR}/lib)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
set(Boost_INCLUDE_DIR /usr/include/)
set(BOOST_LIBRARY_DIR /usr/lib/x86_64-linux-gnu/)
set(Boost_PYTHON_LIBRARY /usr/lib/x86_64-linux-gnu/libboost_python310.so)
set(BUILD_SHARED_LIBS ON)

# Set the path to the directory containing FindNumPy.cmake
find_package(Python REQUIRED COMPONENTS Interpreter Development NumPy)
find_package(NumPy REQUIRED)
find_package(Boost REQUIRED COMPONENTS Python)

# Set include directories
include_directories(
        /usr/include
        /home/mp74207/anaconda3/lib/python3.9/site-packages/numpy/core/include
        /home/mp74207/anaconda3/include/python3.9
        /usr/include/boost
)

# Set minimum compute capability
set(CMAKE_CUDA_ARCHITECTURES "50")

# Set C++ standard
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_C_COMPILER /opt/nvidia/hpc_sdk/Linux_x86_64/23.3/compilers/bin/nvcc)
set(CMAKE_CXX_COMPILER /opt/nvidia/hpc_sdk/Linux_x86_64/23.3/compilers/bin/nvc++)

if(CMAKE_CUDA_COMPILER_ID MATCHES "NVIDIA")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -arch=sm_50")
endif()

# Build GalaxyFormationCUDA library
set(LIBRARY_NAME_CUDA "GalaxyFormationCUDA")
set(SOURCE_FILES_CUDA src/GalaxyFormationCUDA.cu include/GalaxyFormationCUDA.h)
add_library(${LIBRARY_NAME_CUDA}_static STATIC ${SOURCE_FILES_CUDA})
target_link_libraries(${LIBRARY_NAME_CUDA}_static PRIVATE ${PYTHON_LIBRARIES} ${NUMPY_LIBRARIES} cudart stdc++fs m)

add_library(${LIBRARY_NAME_CUDA}_shared SHARED ${SOURCE_FILES_CUDA})
target_link_libraries(${LIBRARY_NAME_CUDA}_shared PRIVATE ${PYTHON_LIBRARIES} ${NUMPY_LIBRARIES} cudart stdc++fs m)